{"ast":null,"code":"\"use strict\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.BillService = void 0;\n\nconst core_1 = require(\"@mikro-orm/core\");\n\nconst nestjs_1 = require(\"@mikro-orm/nestjs\");\n\nconst common_1 = require(\"@nestjs/common\");\n\nconst models_1 = require(\"@/models\");\n\nconst date_1 = require(\"@/utils/date\");\n\nlet BillService = class BillService {\n  constructor(billRepository) {\n    _defineProperty(this, \"billRepository\", void 0);\n\n    this.billRepository = billRepository;\n  }\n\n  async find(userID, {\n    offset,\n    limit\n  }) {\n    return this.billRepository.findAndCount({\n      user: userID\n    }, {\n      offset,\n      limit,\n      orderBy: {\n        createdAt: core_1.QueryOrder.DESC\n      }\n    });\n  }\n\n  async balance(userID, {\n    date = new Date()\n  }) {\n    const queryBuilder = this.billRepository.createQueryBuilder();\n    const res = await queryBuilder.select(\"sum(value) as balance\").where({\n      user: userID,\n      createdAt: {\n        $gte: (0, date_1.day)(date).startOf(\"month\").toDate(),\n        $lte: (0, date_1.day)(date).endOf(\"month\").toDate()\n      }\n    }).getKnexQuery();\n    return res[0].balance;\n  }\n\n  async create(data, userID) {\n    const bill = this.billRepository.create(_objectSpread(_objectSpread({}, data), {}, {\n      user: userID\n    }));\n    await this.billRepository.persistAndFlush(bill);\n    return bill;\n  }\n\n};\nBillService = __decorate([(0, common_1.Injectable)(), __param(0, (0, nestjs_1.InjectRepository)(models_1.Bill)), __metadata(\"design:paramtypes\", [Object])], BillService);\nexports.BillService = BillService;","map":{"version":3,"sources":["/Users/carlos/Documents/Projetos/Javascript/bills_api/src/modules/bill/bill.service.ts"],"names":["Object","defineProperty","exports","value","BillService","core_1","require","nestjs_1","common_1","models_1","date_1","constructor","billRepository","find","userID","offset","limit","findAndCount","user","orderBy","createdAt","QueryOrder","DESC","balance","date","Date","queryBuilder","createQueryBuilder","res","select","where","$gte","day","startOf","toDate","$lte","endOf","getKnexQuery","create","data","bill","persistAndFlush","__decorate","Injectable","__param","InjectRepository","Bill","__metadata"],"mappings":"AAAA;;;;;;;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,WAAR,GAAsB,KAAK,CAA3B;;AACA,MAAMC,MAAM,GAAGC,OAAO,CAAC,iBAAD,CAAtB;;AACA,MAAMC,QAAQ,GAAGD,OAAO,CAAC,mBAAD,CAAxB;;AACA,MAAME,QAAQ,GAAGF,OAAO,CAAC,gBAAD,CAAxB;;AACA,MAAMG,QAAQ,GAAGH,OAAO,CAAC,UAAD,CAAxB;;AACA,MAAMI,MAAM,GAAGJ,OAAO,CAAC,cAAD,CAAtB;;AACA,IAAIF,WAAW,GAAG,MAAMA,WAAN,CAAkB;AAEhCO,EAAAA,WAAW,CAACC,cAAD,EAAiB;AAAA;;AACxB,SAAKA,cAAL,GAAsBA,cAAtB;AACH;;AACS,QAAJC,IAAI,CAACC,MAAD,EAAS;AAAEC,IAAAA,MAAF;AAAUC,IAAAA;AAAV,GAAT,EAA4B;AAClC,WAAO,KAAKJ,cAAL,CAAoBK,YAApB,CAAiC;AAAEC,MAAAA,IAAI,EAAEJ;AAAR,KAAjC,EAAmD;AAAEC,MAAAA,MAAF;AAAUC,MAAAA,KAAV;AAAiBG,MAAAA,OAAO,EAAE;AAAEC,QAAAA,SAAS,EAAEf,MAAM,CAACgB,UAAP,CAAkBC;AAA/B;AAA1B,KAAnD,CAAP;AACH;;AACY,QAAPC,OAAO,CAACT,MAAD,EAAS;AAAEU,IAAAA,IAAI,GAAG,IAAIC,IAAJ;AAAT,GAAT,EAAgC;AACzC,UAAMC,YAAY,GAAG,KAAKd,cAAL,CAAoBe,kBAApB,EAArB;AACA,UAAMC,GAAG,GAAG,MAAMF,YAAY,CACzBG,MADa,CACN,uBADM,EAEbC,KAFa,CAEP;AACPZ,MAAAA,IAAI,EAAEJ,MADC;AAEPM,MAAAA,SAAS,EAAE;AAAEW,QAAAA,IAAI,EAAE,CAAC,GAAGrB,MAAM,CAACsB,GAAX,EAAgBR,IAAhB,EAAsBS,OAAtB,CAA8B,OAA9B,EAAuCC,MAAvC,EAAR;AAAyDC,QAAAA,IAAI,EAAE,CAAC,GAAGzB,MAAM,CAACsB,GAAX,EAAgBR,IAAhB,EAAsBY,KAAtB,CAA4B,OAA5B,EAAqCF,MAArC;AAA/D;AAFJ,KAFO,EAMbG,YANa,EAAlB;AAOA,WAAOT,GAAG,CAAC,CAAD,CAAH,CAAOL,OAAd;AACH;;AACW,QAANe,MAAM,CAACC,IAAD,EAAOzB,MAAP,EAAe;AACvB,UAAM0B,IAAI,GAAG,KAAK5B,cAAL,CAAoB0B,MAApB,iCAAgCC,IAAhC;AAAsCrB,MAAAA,IAAI,EAAEJ;AAA5C,OAAb;AACA,UAAM,KAAKF,cAAL,CAAoB6B,eAApB,CAAoCD,IAApC,CAAN;AACA,WAAOA,IAAP;AACH;;AAvB+B,CAApC;AAyBApC,WAAW,GAAGsC,UAAU,CAAC,CACrB,CAAC,GAAGlC,QAAQ,CAACmC,UAAb,GADqB,EAErBC,OAAO,CAAC,CAAD,EAAI,CAAC,GAAGrC,QAAQ,CAACsC,gBAAb,EAA+BpC,QAAQ,CAACqC,IAAxC,CAAJ,CAFc,EAGrBC,UAAU,CAAC,mBAAD,EAAsB,CAAC/C,MAAD,CAAtB,CAHW,CAAD,EAIrBI,WAJqB,CAAxB;AAKAF,OAAO,CAACE,WAAR,GAAsBA,WAAtB","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.BillService = void 0;\nconst core_1 = require(\"@mikro-orm/core\");\nconst nestjs_1 = require(\"@mikro-orm/nestjs\");\nconst common_1 = require(\"@nestjs/common\");\nconst models_1 = require(\"@/models\");\nconst date_1 = require(\"@/utils/date\");\nlet BillService = class BillService {\n    billRepository;\n    constructor(billRepository) {\n        this.billRepository = billRepository;\n    }\n    async find(userID, { offset, limit }) {\n        return this.billRepository.findAndCount({ user: userID }, { offset, limit, orderBy: { createdAt: core_1.QueryOrder.DESC } });\n    }\n    async balance(userID, { date = new Date() }) {\n        const queryBuilder = this.billRepository.createQueryBuilder();\n        const res = await queryBuilder\n            .select(\"sum(value) as balance\")\n            .where({\n            user: userID,\n            createdAt: { $gte: (0, date_1.day)(date).startOf(\"month\").toDate(), $lte: (0, date_1.day)(date).endOf(\"month\").toDate() },\n        })\n            .getKnexQuery();\n        return res[0].balance;\n    }\n    async create(data, userID) {\n        const bill = this.billRepository.create({ ...data, user: userID });\n        await this.billRepository.persistAndFlush(bill);\n        return bill;\n    }\n};\nBillService = __decorate([\n    (0, common_1.Injectable)(),\n    __param(0, (0, nestjs_1.InjectRepository)(models_1.Bill)),\n    __metadata(\"design:paramtypes\", [Object])\n], BillService);\nexports.BillService = BillService;\n"]},"metadata":{},"sourceType":"script"}