{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { MikroOrmModule } from \"@mikro-orm/nestjs\";\nimport { Module } from \"@nestjs/common\";\nimport { ConfigModule, ConfigService } from \"@nestjs/config\";\nimport { GraphQLModule } from \"@nestjs/graphql\";\nimport { PinoLogger, LoggerModule } from \"nestjs-pino\";\nimport { AuthenticationModule, UserModule } from \"@/modules\";\nimport { envSchema } from \"@/utils/env.schema\";\nimport { getConfiguration } from \"./mikro-orm.config\";\nimport { BillModule } from \"./modules/bill\";\nlet ApplicationModule = class ApplicationModule {};\nApplicationModule = __decorate([Module({\n  imports: [LoggerModule.forRoot({\n    pinoHttp: {\n      base: {\n        name: \"Billz\"\n      },\n      messageKey: \"message\",\n      autoLogging: false,\n      level: true ? \"debug\" : \"info\",\n      prettyPrint: true ? {\n        translateTime: \"dd/mm/yyyy, hh:MM:ss:l\",\n        ignore: \"context,pid,req\",\n        levelFirst: true\n      } : undefined\n    }\n  }), ConfigModule.forRoot({\n    isGlobal: true,\n    validationSchema: envSchema\n  }), GraphQLModule.forRootAsync({\n    inject: [ConfigService],\n    useFactory: async configService => ({\n      autoSchemaFile: configService.get(\"GRAPHQL_FILE\"),\n      sortSchema: true,\n      cors: true,\n      context: ({\n        req,\n        res\n      }) => ({\n        req,\n        res\n      })\n    })\n  }), MikroOrmModule.forRootAsync({\n    inject: [ConfigService, PinoLogger],\n    useFactory: async (configService, logger) => _objectSpread(_objectSpread({}, getConfiguration(configService)), {}, {\n      debug: true ? [\"query\", \"query-params\"] : false,\n      logger: message => logger.debug(message)\n    })\n  }), AuthenticationModule, UserModule, BillModule]\n})], ApplicationModule);\nexport { ApplicationModule };","map":{"version":3,"sources":["/Users/carlos/Documents/Projetos/Javascript/bills_api/src/application.module.ts"],"names":["MikroOrmModule","Module","ConfigModule","ConfigService","GraphQLModule","PinoLogger","LoggerModule","AuthenticationModule","UserModule","envSchema","getConfiguration","BillModule","ApplicationModule","__decorate","imports","forRoot","pinoHttp","base","name","messageKey","autoLogging","level","prettyPrint","translateTime","ignore","levelFirst","undefined","isGlobal","validationSchema","forRootAsync","inject","useFactory","configService","autoSchemaFile","get","sortSchema","cors","context","req","res","logger","debug","message"],"mappings":";;;;;;AAAA,SAASA,cAAT,QAA+B,mBAA/B;AACA,SAASC,MAAT,QAAuB,gBAAvB;AACA,SAASC,YAAT,EAAuBC,aAAvB,QAA4C,gBAA5C;AACA,SAASC,aAAT,QAA8B,iBAA9B;AACA,SAASC,UAAT,EAAqBC,YAArB,QAAyC,aAAzC;AACA,SAASC,oBAAT,EAA+BC,UAA/B,QAAiD,WAAjD;AACA,SAASC,SAAT,QAA0B,oBAA1B;AACA,SAASC,gBAAT,QAAiC,oBAAjC;AACA,SAASC,UAAT,QAA2B,gBAA3B;AACA,IAAIC,iBAAiB,GAAG,MAAMA,iBAAN,CAAwB,EAAhD;AAEAA,iBAAiB,GAAGC,UAAU,CAAC,CAC3BZ,MAAM,CAAC;AACHa,EAAAA,OAAO,EAAE,CACLR,YAAY,CAACS,OAAb,CAAqB;AACjBC,IAAAA,QAAQ,EAAE;AACNC,MAAAA,IAAI,EAAE;AAAEC,QAAAA,IAAI,EAAE;AAAR,OADA;AAENC,MAAAA,UAAU,EAAE,SAFN;AAGNC,MAAAA,WAAW,OAHL;AAINC,MAAAA,KAAK,EAAE,OAAwC,OAAxC,GAAkD,MAJnD;AAKNC,MAAAA,WAAW,EAAE,OACP;AACEC,QAAAA,aAAa,EAAE,wBADjB;AAEEC,QAAAA,MAAM,EAAE,iBAFV;AAGEC,QAAAA,UAAU,EAAE;AAHd,OADO,GAMPC;AAXA;AADO,GAArB,CADK,EAgBLxB,YAAY,CAACa,OAAb,CAAqB;AACjBY,IAAAA,QAAQ,EAAE,IADO;AAEjBC,IAAAA,gBAAgB,EAAEnB;AAFD,GAArB,CAhBK,EAoBLL,aAAa,CAACyB,YAAd,CAA2B;AACvBC,IAAAA,MAAM,EAAE,CAAC3B,aAAD,CADe;AAEvB4B,IAAAA,UAAU,EAAE,MAAOC,aAAP,KAA0B;AAClCC,MAAAA,cAAc,EAAED,aAAa,CAACE,GAAd,CAAkB,cAAlB,CADkB;AAElCC,MAAAA,UAAU,EAAE,IAFsB;AAGlCC,MAAAA,IAAI,EAAE,IAH4B;AAIlCC,MAAAA,OAAO,EAAE,CAAC;AAAEC,QAAAA,GAAF;AAAOC,QAAAA;AAAP,OAAD,MAAmB;AAAED,QAAAA,GAAF;AAAOC,QAAAA;AAAP,OAAnB;AAJyB,KAA1B;AAFW,GAA3B,CApBK,EA6BLvC,cAAc,CAAC6B,YAAf,CAA4B;AACxBC,IAAAA,MAAM,EAAE,CAAC3B,aAAD,EAAgBE,UAAhB,CADgB;AAExB0B,IAAAA,UAAU,EAAE,OAAOC,aAAP,EAAsBQ,MAAtB,qCACL9B,gBAAgB,CAACsB,aAAD,CADX;AAERS,MAAAA,KAAK,EAAE,OAAyC,CAAC,OAAD,EAAU,cAAV,CAAzC,GAAqE,KAFpE;AAGRD,MAAAA,MAAM,EAAGE,OAAD,IAAaF,MAAM,CAACC,KAAP,CAAaC,OAAb;AAHb;AAFY,GAA5B,CA7BK,EAqCLnC,oBArCK,EAsCLC,UAtCK,EAuCLG,UAvCK;AADN,CAAD,CADqB,CAAD,EA4C3BC,iBA5C2B,CAA9B;AA6CA,SAASA,iBAAT","sourcesContent":["import { MikroOrmModule } from \"@mikro-orm/nestjs\";\nimport { Module } from \"@nestjs/common\";\nimport { ConfigModule, ConfigService } from \"@nestjs/config\";\nimport { GraphQLModule } from \"@nestjs/graphql\";\nimport { PinoLogger, LoggerModule } from \"nestjs-pino\";\nimport { AuthenticationModule, UserModule } from \"@/modules\";\nimport { envSchema } from \"@/utils/env.schema\";\nimport { getConfiguration } from \"./mikro-orm.config\";\nimport { BillModule } from \"./modules/bill\";\nlet ApplicationModule = class ApplicationModule {\n};\nApplicationModule = __decorate([\n    Module({\n        imports: [\n            LoggerModule.forRoot({\n                pinoHttp: {\n                    base: { name: \"Billz\" },\n                    messageKey: \"message\",\n                    autoLogging: process.env.NODE_ENV === \"production\",\n                    level: process.env.NODE_ENV !== \"production\" ? \"debug\" : \"info\",\n                    prettyPrint: process.env.NODE_ENV !== \"production\"\n                        ? {\n                            translateTime: \"dd/mm/yyyy, hh:MM:ss:l\",\n                            ignore: \"context,pid,req\",\n                            levelFirst: true,\n                        }\n                        : undefined,\n                },\n            }),\n            ConfigModule.forRoot({\n                isGlobal: true,\n                validationSchema: envSchema,\n            }),\n            GraphQLModule.forRootAsync({\n                inject: [ConfigService],\n                useFactory: async (configService) => ({\n                    autoSchemaFile: configService.get(\"GRAPHQL_FILE\"),\n                    sortSchema: true,\n                    cors: true,\n                    context: ({ req, res }) => ({ req, res }),\n                }),\n            }),\n            MikroOrmModule.forRootAsync({\n                inject: [ConfigService, PinoLogger],\n                useFactory: async (configService, logger) => ({\n                    ...getConfiguration(configService),\n                    debug: process.env.NODE_ENV === \"development\" ? [\"query\", \"query-params\"] : false,\n                    logger: (message) => logger.debug(message),\n                }),\n            }),\n            AuthenticationModule,\n            UserModule,\n            BillModule,\n        ],\n    })\n], ApplicationModule);\nexport { ApplicationModule };\n"]},"metadata":{},"sourceType":"module"}