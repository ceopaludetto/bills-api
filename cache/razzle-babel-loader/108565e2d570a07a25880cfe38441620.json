{"ast":null,"code":"function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nvar _a, _b;\n\nimport { Injectable, NotFoundException, BadRequestException, UnprocessableEntityException } from \"@nestjs/common\";\nimport { JwtService } from \"@nestjs/jwt\";\nimport { UserService } from \"@/modules/user\";\nlet AuthenticationService = class AuthenticationService {\n  constructor(userService, jwtService) {\n    _defineProperty(this, \"userService\", void 0);\n\n    _defineProperty(this, \"jwtService\", void 0);\n\n    this.userService = userService;\n    this.jwtService = jwtService;\n  }\n\n  async genToken(user) {\n    return this.jwtService.signAsync({\n      id: user.id,\n      email: user.email\n    });\n  }\n\n  async validatePayload(payload) {\n    const user = await this.userService.findByID(payload.id);\n    if (!user) throw new NotFoundException(\"user-not-found\");\n    if (user.email !== payload.email) throw new UnprocessableEntityException(\"email-mismatch\");\n    return user;\n  }\n\n  async login({\n    email,\n    password\n  }, res) {\n    const user = await this.userService.findByEmail(email);\n    console.log(await (user === null || user === void 0 ? void 0 : user.comparePassword(password)));\n    if (!user) throw new NotFoundException(\"user-not-found\");\n    if (!(await user.comparePassword(password))) throw new BadRequestException(\"incorrect-password\");\n    const token = await this.genToken(user);\n    res.header(\"Authorization\", token);\n    return user;\n  }\n\n  async register(data, res) {\n    const user = await this.userService.create(data);\n    const token = await this.genToken(user);\n    res.header(\"Authorization\", token);\n    return user;\n  }\n\n};\nAuthenticationService = __decorate([Injectable(), __metadata(\"design:paramtypes\", [typeof (_a = typeof UserService !== \"undefined\" && UserService) === \"function\" ? _a : Object, typeof (_b = typeof JwtService !== \"undefined\" && JwtService) === \"function\" ? _b : Object])], AuthenticationService);\nexport { AuthenticationService };","map":{"version":3,"sources":["/Users/carlos/Documents/Projetos/Javascript/bills_api/src/modules/authentication/authentication.service.ts"],"names":["_a","_b","Injectable","NotFoundException","BadRequestException","UnprocessableEntityException","JwtService","UserService","AuthenticationService","constructor","userService","jwtService","genToken","user","signAsync","id","email","validatePayload","payload","findByID","login","password","res","findByEmail","console","log","comparePassword","token","header","register","data","create","__decorate","__metadata","Object"],"mappings":";;AAAA,IAAIA,EAAJ,EAAQC,EAAR;;AACA,SAASC,UAAT,EAAqBC,iBAArB,EAAwCC,mBAAxC,EAA6DC,4BAA7D,QAAiG,gBAAjG;AACA,SAASC,UAAT,QAA2B,aAA3B;AACA,SAASC,WAAT,QAA4B,gBAA5B;AACA,IAAIC,qBAAqB,GAAG,MAAMA,qBAAN,CAA4B;AAGpDC,EAAAA,WAAW,CAACC,WAAD,EAAcC,UAAd,EAA0B;AAAA;;AAAA;;AACjC,SAAKD,WAAL,GAAmBA,WAAnB;AACA,SAAKC,UAAL,GAAkBA,UAAlB;AACH;;AACa,QAARC,QAAQ,CAACC,IAAD,EAAO;AACjB,WAAO,KAAKF,UAAL,CAAgBG,SAAhB,CAA0B;AAAEC,MAAAA,EAAE,EAAEF,IAAI,CAACE,EAAX;AAAeC,MAAAA,KAAK,EAAEH,IAAI,CAACG;AAA3B,KAA1B,CAAP;AACH;;AACoB,QAAfC,eAAe,CAACC,OAAD,EAAU;AAC3B,UAAML,IAAI,GAAG,MAAM,KAAKH,WAAL,CAAiBS,QAAjB,CAA0BD,OAAO,CAACH,EAAlC,CAAnB;AACA,QAAI,CAACF,IAAL,EACI,MAAM,IAAIV,iBAAJ,CAAsB,gBAAtB,CAAN;AACJ,QAAIU,IAAI,CAACG,KAAL,KAAeE,OAAO,CAACF,KAA3B,EACI,MAAM,IAAIX,4BAAJ,CAAiC,gBAAjC,CAAN;AACJ,WAAOQ,IAAP;AACH;;AACU,QAALO,KAAK,CAAC;AAAEJ,IAAAA,KAAF;AAASK,IAAAA;AAAT,GAAD,EAAsBC,GAAtB,EAA2B;AAClC,UAAMT,IAAI,GAAG,MAAM,KAAKH,WAAL,CAAiBa,WAAjB,CAA6BP,KAA7B,CAAnB;AACAQ,IAAAA,OAAO,CAACC,GAAR,CAAY,OAAMZ,IAAN,aAAMA,IAAN,uBAAMA,IAAI,CAAEa,eAAN,CAAsBL,QAAtB,CAAN,CAAZ;AACA,QAAI,CAACR,IAAL,EACI,MAAM,IAAIV,iBAAJ,CAAsB,gBAAtB,CAAN;AACJ,QAAI,EAAE,MAAMU,IAAI,CAACa,eAAL,CAAqBL,QAArB,CAAR,CAAJ,EACI,MAAM,IAAIjB,mBAAJ,CAAwB,oBAAxB,CAAN;AACJ,UAAMuB,KAAK,GAAG,MAAM,KAAKf,QAAL,CAAcC,IAAd,CAApB;AACAS,IAAAA,GAAG,CAACM,MAAJ,CAAW,eAAX,EAA4BD,KAA5B;AACA,WAAOd,IAAP;AACH;;AACa,QAARgB,QAAQ,CAACC,IAAD,EAAOR,GAAP,EAAY;AACtB,UAAMT,IAAI,GAAG,MAAM,KAAKH,WAAL,CAAiBqB,MAAjB,CAAwBD,IAAxB,CAAnB;AACA,UAAMH,KAAK,GAAG,MAAM,KAAKf,QAAL,CAAcC,IAAd,CAApB;AACAS,IAAAA,GAAG,CAACM,MAAJ,CAAW,eAAX,EAA4BD,KAA5B;AACA,WAAOd,IAAP;AACH;;AAlCmD,CAAxD;AAoCAL,qBAAqB,GAAGwB,UAAU,CAAC,CAC/B9B,UAAU,EADqB,EAE/B+B,UAAU,CAAC,mBAAD,EAAsB,CAAC,QAAQjC,EAAE,GAAG,OAAOO,WAAP,KAAuB,WAAvB,IAAsCA,WAAnD,MAAoE,UAApE,GAAiFP,EAAjF,GAAsFkC,MAAvF,EAA+F,QAAQjC,EAAE,GAAG,OAAOK,UAAP,KAAsB,WAAtB,IAAqCA,UAAlD,MAAkE,UAAlE,GAA+EL,EAA/E,GAAoFiC,MAAnL,CAAtB,CAFqB,CAAD,EAG/B1B,qBAH+B,CAAlC;AAIA,SAASA,qBAAT","sourcesContent":["var _a, _b;\nimport { Injectable, NotFoundException, BadRequestException, UnprocessableEntityException } from \"@nestjs/common\";\nimport { JwtService } from \"@nestjs/jwt\";\nimport { UserService } from \"@/modules/user\";\nlet AuthenticationService = class AuthenticationService {\n    userService;\n    jwtService;\n    constructor(userService, jwtService) {\n        this.userService = userService;\n        this.jwtService = jwtService;\n    }\n    async genToken(user) {\n        return this.jwtService.signAsync({ id: user.id, email: user.email });\n    }\n    async validatePayload(payload) {\n        const user = await this.userService.findByID(payload.id);\n        if (!user)\n            throw new NotFoundException(\"user-not-found\");\n        if (user.email !== payload.email)\n            throw new UnprocessableEntityException(\"email-mismatch\");\n        return user;\n    }\n    async login({ email, password }, res) {\n        const user = await this.userService.findByEmail(email);\n        console.log(await user?.comparePassword(password));\n        if (!user)\n            throw new NotFoundException(\"user-not-found\");\n        if (!(await user.comparePassword(password)))\n            throw new BadRequestException(\"incorrect-password\");\n        const token = await this.genToken(user);\n        res.header(\"Authorization\", token);\n        return user;\n    }\n    async register(data, res) {\n        const user = await this.userService.create(data);\n        const token = await this.genToken(user);\n        res.header(\"Authorization\", token);\n        return user;\n    }\n};\nAuthenticationService = __decorate([\n    Injectable(),\n    __metadata(\"design:paramtypes\", [typeof (_a = typeof UserService !== \"undefined\" && UserService) === \"function\" ? _a : Object, typeof (_b = typeof JwtService !== \"undefined\" && JwtService) === \"function\" ? _b : Object])\n], AuthenticationService);\nexport { AuthenticationService };\n"]},"metadata":{},"sourceType":"module"}