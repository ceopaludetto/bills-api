{"ast":null,"code":"import path from \"path\";\nimport * as entities from \"@/models\";\nexport function getConfiguration(configService) {\n  var _configService$get, _configService$get2, _configService$get3, _configService$get4, _configService$get5, _configService$get6;\n\n  return {\n    type: (_configService$get = configService === null || configService === void 0 ? void 0 : configService.get(\"DATABASE_TYPE\")) !== null && _configService$get !== void 0 ? _configService$get : process.env.DATABASE_TYPE,\n    dbName: (_configService$get2 = configService === null || configService === void 0 ? void 0 : configService.get(\"DATABASE_NAME\")) !== null && _configService$get2 !== void 0 ? _configService$get2 : process.env.DATABASE_NAME,\n    host: (_configService$get3 = configService === null || configService === void 0 ? void 0 : configService.get(\"DATABASE_HOST\")) !== null && _configService$get3 !== void 0 ? _configService$get3 : process.env.DATABASE_HOST,\n    port: (_configService$get4 = configService === null || configService === void 0 ? void 0 : configService.get(\"DATABASE_PORT\")) !== null && _configService$get4 !== void 0 ? _configService$get4 : Number(process.env.DATABASE_PORT),\n    user: (_configService$get5 = configService === null || configService === void 0 ? void 0 : configService.get(\"DATABASE_USER\")) !== null && _configService$get5 !== void 0 ? _configService$get5 : process.env.DATABASE_USER,\n    password: (_configService$get6 = configService === null || configService === void 0 ? void 0 : configService.get(\"DATABASE_PASS\")) !== null && _configService$get6 !== void 0 ? _configService$get6 : process.env.DATABASE_PASS,\n    entities: Object.values(entities),\n    migrations: {\n      path: path.resolve(\"src/database/migrations\"),\n      allOrNothing: true,\n      transactional: true,\n      tableName: \"Migrations\"\n    }\n  };\n}\nexport default getConfiguration();","map":{"version":3,"sources":["/Users/carlos/Documents/Projetos/Javascript/bills_api/src/mikro-orm.config.ts"],"names":["path","entities","getConfiguration","configService","type","get","process","env","DATABASE_TYPE","dbName","DATABASE_NAME","host","DATABASE_HOST","port","Number","DATABASE_PORT","user","DATABASE_USER","password","DATABASE_PASS","Object","values","migrations","resolve","allOrNothing","transactional","tableName"],"mappings":"AAAA,OAAOA,IAAP,MAAiB,MAAjB;AACA,OAAO,KAAKC,QAAZ,MAA0B,UAA1B;AACA,OAAO,SAASC,gBAAT,CAA0BC,aAA1B,EAAyC;AAAA;;AAC5C,SAAO;AACHC,IAAAA,IAAI,wBAAED,aAAF,aAAEA,aAAF,uBAAEA,aAAa,CAAEE,GAAf,CAAmB,eAAnB,CAAF,mEAAyCC,OAAO,CAACC,GAAR,CAAYC,aADtD;AAEHC,IAAAA,MAAM,yBAAEN,aAAF,aAAEA,aAAF,uBAAEA,aAAa,CAAEE,GAAf,CAAmB,eAAnB,CAAF,qEAAyCC,OAAO,CAACC,GAAR,CAAYG,aAFxD;AAGHC,IAAAA,IAAI,yBAAER,aAAF,aAAEA,aAAF,uBAAEA,aAAa,CAAEE,GAAf,CAAmB,eAAnB,CAAF,qEAAyCC,OAAO,CAACC,GAAR,CAAYK,aAHtD;AAIHC,IAAAA,IAAI,yBAAEV,aAAF,aAAEA,aAAF,uBAAEA,aAAa,CAAEE,GAAf,CAAmB,eAAnB,CAAF,qEAAyCS,MAAM,CAACR,OAAO,CAACC,GAAR,CAAYQ,aAAb,CAJhD;AAKHC,IAAAA,IAAI,yBAAEb,aAAF,aAAEA,aAAF,uBAAEA,aAAa,CAAEE,GAAf,CAAmB,eAAnB,CAAF,qEAAyCC,OAAO,CAACC,GAAR,CAAYU,aALtD;AAMHC,IAAAA,QAAQ,yBAAEf,aAAF,aAAEA,aAAF,uBAAEA,aAAa,CAAEE,GAAf,CAAmB,eAAnB,CAAF,qEAAyCC,OAAO,CAACC,GAAR,CAAYY,aAN1D;AAOHlB,IAAAA,QAAQ,EAAEmB,MAAM,CAACC,MAAP,CAAcpB,QAAd,CAPP;AAQHqB,IAAAA,UAAU,EAAE;AACRtB,MAAAA,IAAI,EAAEA,IAAI,CAACuB,OAAL,CAAa,yBAAb,CADE;AAERC,MAAAA,YAAY,EAAE,IAFN;AAGRC,MAAAA,aAAa,EAAE,IAHP;AAIRC,MAAAA,SAAS,EAAE;AAJH;AART,GAAP;AAeH;AACD,eAAexB,gBAAgB,EAA/B","sourcesContent":["import path from \"path\";\nimport * as entities from \"@/models\";\nexport function getConfiguration(configService) {\n    return {\n        type: configService?.get(\"DATABASE_TYPE\") ?? process.env.DATABASE_TYPE,\n        dbName: configService?.get(\"DATABASE_NAME\") ?? process.env.DATABASE_NAME,\n        host: configService?.get(\"DATABASE_HOST\") ?? process.env.DATABASE_HOST,\n        port: configService?.get(\"DATABASE_PORT\") ?? Number(process.env.DATABASE_PORT),\n        user: configService?.get(\"DATABASE_USER\") ?? process.env.DATABASE_USER,\n        password: configService?.get(\"DATABASE_PASS\") ?? process.env.DATABASE_PASS,\n        entities: Object.values(entities),\n        migrations: {\n            path: path.resolve(\"src/database/migrations\"),\n            allOrNothing: true,\n            transactional: true,\n            tableName: \"Migrations\",\n        },\n    };\n}\nexport default getConfiguration();\n"]},"metadata":{},"sourceType":"module"}