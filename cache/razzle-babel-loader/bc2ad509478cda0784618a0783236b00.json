{"ast":null,"code":"const _excluded = [\"password\"];\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { InjectRepository } from \"@mikro-orm/nestjs\";\nimport { Injectable } from \"@nestjs/common\";\nimport bcrypt from \"bcryptjs\";\nimport { User } from \"@/models\";\nlet UserService = class UserService {\n  constructor(userRepository) {\n    _defineProperty(this, \"userRepository\", void 0);\n\n    this.userRepository = userRepository;\n  }\n\n  async findByID(id) {\n    return this.userRepository.findOne({\n      id\n    });\n  }\n\n  async findByEmail(email) {\n    return this.userRepository.findOne({\n      email\n    });\n  }\n\n  async create(_ref) {\n    let {\n      password\n    } = _ref,\n        rest = _objectWithoutProperties(_ref, _excluded);\n\n    const hash = await bcrypt.hash(password, 10);\n    const user = this.userRepository.create(_objectSpread({\n      password: hash\n    }, rest));\n    await this.userRepository.persistAndFlush(user);\n    return user;\n  }\n\n};\nUserService = __decorate([Injectable(), __param(0, InjectRepository(User)), __metadata(\"design:paramtypes\", [Object])], UserService);\nexport { UserService };","map":{"version":3,"sources":["/Users/carlos/Documents/Projetos/Javascript/bills_api/src/modules/user/user.service.ts"],"names":["InjectRepository","Injectable","bcrypt","User","UserService","constructor","userRepository","findByID","id","findOne","findByEmail","email","create","password","rest","hash","user","persistAndFlush","__decorate","__param","__metadata","Object"],"mappings":";;;;;;;;;;;;AAAA,SAASA,gBAAT,QAAiC,mBAAjC;AACA,SAASC,UAAT,QAA2B,gBAA3B;AACA,OAAOC,MAAP,MAAmB,UAAnB;AACA,SAASC,IAAT,QAAqB,UAArB;AACA,IAAIC,WAAW,GAAG,MAAMA,WAAN,CAAkB;AAEhCC,EAAAA,WAAW,CAACC,cAAD,EAAiB;AAAA;;AACxB,SAAKA,cAAL,GAAsBA,cAAtB;AACH;;AACa,QAARC,QAAQ,CAACC,EAAD,EAAK;AACf,WAAO,KAAKF,cAAL,CAAoBG,OAApB,CAA4B;AAAED,MAAAA;AAAF,KAA5B,CAAP;AACH;;AACgB,QAAXE,WAAW,CAACC,KAAD,EAAQ;AACrB,WAAO,KAAKL,cAAL,CAAoBG,OAApB,CAA4B;AAAEE,MAAAA;AAAF,KAA5B,CAAP;AACH;;AACW,QAANC,MAAM,OAAwB;AAAA,QAAvB;AAAEC,MAAAA;AAAF,KAAuB;AAAA,QAARC,IAAQ;;AAChC,UAAMC,IAAI,GAAG,MAAMb,MAAM,CAACa,IAAP,CAAYF,QAAZ,EAAsB,EAAtB,CAAnB;AACA,UAAMG,IAAI,GAAG,KAAKV,cAAL,CAAoBM,MAApB;AAA6BC,MAAAA,QAAQ,EAAEE;AAAvC,OAAgDD,IAAhD,EAAb;AACA,UAAM,KAAKR,cAAL,CAAoBW,eAApB,CAAoCD,IAApC,CAAN;AACA,WAAOA,IAAP;AACH;;AAhB+B,CAApC;AAkBAZ,WAAW,GAAGc,UAAU,CAAC,CACrBjB,UAAU,EADW,EAErBkB,OAAO,CAAC,CAAD,EAAInB,gBAAgB,CAACG,IAAD,CAApB,CAFc,EAGrBiB,UAAU,CAAC,mBAAD,EAAsB,CAACC,MAAD,CAAtB,CAHW,CAAD,EAIrBjB,WAJqB,CAAxB;AAKA,SAASA,WAAT","sourcesContent":["import { InjectRepository } from \"@mikro-orm/nestjs\";\nimport { Injectable } from \"@nestjs/common\";\nimport bcrypt from \"bcryptjs\";\nimport { User } from \"@/models\";\nlet UserService = class UserService {\n    userRepository;\n    constructor(userRepository) {\n        this.userRepository = userRepository;\n    }\n    async findByID(id) {\n        return this.userRepository.findOne({ id });\n    }\n    async findByEmail(email) {\n        return this.userRepository.findOne({ email });\n    }\n    async create({ password, ...rest }) {\n        const hash = await bcrypt.hash(password, 10);\n        const user = this.userRepository.create({ password: hash, ...rest });\n        await this.userRepository.persistAndFlush(user);\n        return user;\n    }\n};\nUserService = __decorate([\n    Injectable(),\n    __param(0, InjectRepository(User)),\n    __metadata(\"design:paramtypes\", [Object])\n], UserService);\nexport { UserService };\n"]},"metadata":{},"sourceType":"module"}