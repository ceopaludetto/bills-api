{"version":3,"file":"server.55cd212a108eefd8228c.hot-update.js","sources":["webpack://bills_api/./src/application.module.ts","webpack://bills_api/webpack/runtime/getFullHash"],"sourcesContent":["import { MikroOrmModule } from \"@mikro-orm/nestjs\";\nimport { Module } from \"@nestjs/common\";\nimport { ConfigModule, ConfigService } from \"@nestjs/config\";\nimport { GraphQLModule } from \"@nestjs/graphql\";\nimport { LoggerModule } from \"nestjs-pino\";\nimport { AuthenticationModule, UserModule } from \"@/modules\";\nimport { envSchema } from \"@/utils/env.schema\";\nimport { getConfiguration } from \"./mikro-orm.config\";\nlet ApplicationModule = class ApplicationModule {\n};\nApplicationModule = __decorate([\n    Module({\n        imports: [\n            LoggerModule.forRoot({\n                pinoHttp: {\n                    base: { name: \"Billz\" },\n                    messageKey: \"message\",\n                    autoLogging: process.env.NODE_ENV === \"production\",\n                    level: process.env.NODE_ENV !== \"production\" ? \"debug\" : \"info\",\n                    prettyPrint: process.env.NODE_ENV !== \"production\"\n                        ? {\n                            translateTime: \"dd/mm/yyyy, hh:MM:ss:l\",\n                            ignore: \"context,pid,req\",\n                            levelFirst: true,\n                        }\n                        : undefined,\n                },\n            }),\n            ConfigModule.forRoot({\n                isGlobal: true,\n                validationSchema: envSchema,\n            }),\n            GraphQLModule.forRootAsync({\n                inject: [ConfigService],\n                useFactory: async (configService) => ({\n                    autoSchemaFile: configService.get(\"GRAPHQL_FILE\"),\n                    sortSchema: true,\n                    cors: true,\n                    context: ({ req, res }) => ({ req, res }),\n                }),\n            }),\n            MikroOrmModule.forRootAsync({\n                inject: [ConfigService],\n                useFactory: async (configService) => ({ ...getConfiguration(configService) }),\n            }),\n            AuthenticationModule,\n            UserModule,\n        ],\n    })\n], ApplicationModule);\nexport { ApplicationModule };\n","__webpack_require__.h = () => (\"bb37b5061c8858e6dcae\")"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAHA;AANA;AADA;AAgBA;AACA;AAFA;AAKA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAJA;AAFA;AAUA;AACA;AAFA;AA9BA;;;A;;;;;;;;;ACXA;;;;A","sourceRoot":""}