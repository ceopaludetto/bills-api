{"version":3,"file":"server.fe55b3aaca7ac9595896.hot-update.js","sources":["webpack://bills_api/./src/modules/authentication/authentication.guard.ts","webpack://bills_api/webpack/runtime/getFullHash"],"sourcesContent":["\"use strict\";\nvar _a, _b, _c;\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.GqlAuthenticationGuard = void 0;\nconst common_1 = require(\"@nestjs/common\");\nconst config_1 = require(\"@nestjs/config\");\nconst graphql_1 = require(\"@nestjs/graphql\");\nconst jwt_1 = require(\"@nestjs/jwt\");\nconst passport_1 = require(\"@nestjs/passport\");\nconst user_1 = require(\"../user\");\nconst extract_1 = require(\"./strategies/extract\");\nlet GqlAuthenticationGuard = class GqlAuthenticationGuard extends (0, passport_1.AuthGuard)(\"jwt\") {\n    jwtService;\n    configService;\n    userService;\n    constructor(jwtService, configService, userService) {\n        super();\n        this.jwtService = jwtService;\n        this.configService = configService;\n        this.userService = userService;\n    }\n    getRequest(context) {\n        const { req } = graphql_1.GqlExecutionContext.create(context).getContext();\n        return req;\n    }\n    async canActivate(context) {\n        const request = this.getRequest(context);\n        const token = extract_1.Extract.accessToken(request);\n        if (!token)\n            return super.canActivate(context);\n        let userID;\n        try {\n            const { id } = this.jwtService.decode(token);\n            userID = id;\n        }\n        catch (error) {\n            if (error instanceof Error) {\n                if (error.name === \"TokenExpiredError\") {\n                    const refreshToken = extract_1.Extract.refreshToken(request);\n                    if (!refreshToken)\n                        return super.canActivate(context);\n                    if (!userID)\n                        return super.canActivate(context);\n                    const user = await this.userService.findByID(userID);\n                    if (!user)\n                        return super.canActivate(context);\n                    this.jwtService.verifyAsync(refreshToken, { secret: this.configService.get(\"AUTH_SECRET\") + user?.password });\n                }\n                return super.canActivate(context);\n            }\n            return super.canActivate(context);\n        }\n    }\n};\nGqlAuthenticationGuard = __decorate([\n    (0, common_1.Injectable)(),\n    __metadata(\"design:paramtypes\", [typeof (_a = typeof jwt_1.JwtService !== \"undefined\" && jwt_1.JwtService) === \"function\" ? _a : Object, typeof (_b = typeof config_1.ConfigService !== \"undefined\" && config_1.ConfigService) === \"function\" ? _b : Object, typeof (_c = typeof user_1.UserService !== \"undefined\" && user_1.UserService) === \"function\" ? _c : Object])\n], GqlAuthenticationGuard);\nexports.GqlAuthenticationGuard = GqlAuthenticationGuard;\n","__webpack_require__.h = () => (\"e9505456b03bb22d94a8\")"],"mappings":";;;;;;;;;;;AAAA;AACA;;;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAIA;AACA;AACA;AAFA;AACA;AADA;AACA;AADA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AA1CA;AA2CA;AAIA;;A;;;;;;;;;AC1DA;;;;A","sourceRoot":""}