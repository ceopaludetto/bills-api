{"version":3,"file":"server.b3eec2ba9bec24eee1fc.hot-update.js","sources":["webpack://bills_api/./src/modules/authentication/authentication.service.ts","webpack://bills_api/webpack/runtime/getFullHash"],"sourcesContent":["\"use strict\";\nvar _a, _b, _c;\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.AuthenticationService = void 0;\nconst common_1 = require(\"@nestjs/common\");\nconst config_1 = require(\"@nestjs/config\");\nconst jwt_1 = require(\"@nestjs/jwt\");\nconst user_1 = require(\"@/modules/user\");\nlet AuthenticationService = class AuthenticationService {\n    userService;\n    jwtService;\n    configService;\n    constructor(userService, jwtService, configService) {\n        this.userService = userService;\n        this.jwtService = jwtService;\n        this.configService = configService;\n    }\n    async genTokens(user) {\n        const accessToken = await this.jwtService.signAsync({ id: user.id }, { secret: this.configService.get(\"AUTH_SECRET\") });\n        const refreshToken = await this.jwtService.signAsync({ id: user.id }, { secret: this.configService.get(\"AUTH_SECRET\") + user.password });\n        return [accessToken, refreshToken];\n    }\n    async validatePayload(payload) {\n        const user = await this.userService.findByID(payload.id);\n        if (!user)\n            throw new common_1.NotFoundException(\"user-not-found\");\n        if (user.email !== payload.email)\n            throw new common_1.UnprocessableEntityException(\"email-mismatch\");\n        return user;\n    }\n    async login({ email, password }, res) {\n        const user = await this.userService.findByEmail(email);\n        if (!user)\n            throw new common_1.NotFoundException(\"user-not-found\");\n        if (!(await user.comparePassword(password)))\n            throw new common_1.BadRequestException(\"incorrect-password\");\n        this.setTokensInResponse(res, await this.genTokens(user));\n        return user;\n    }\n    async register(data, res) {\n        const user = await this.userService.create(data);\n        this.setTokensInResponse(res, await this.genTokens(user));\n        return user;\n    }\n    async findUserByTokenID(id) {\n        const user = await this.userService.findByID(id);\n        return user;\n    }\n    setTokensInResponse(res, [accessToken, refreshToken]) {\n        res.header(\"Authorization\", accessToken);\n        res.header(\"RefreshToken\", refreshToken);\n    }\n};\nAuthenticationService = __decorate([\n    (0, common_1.Injectable)(),\n    __metadata(\"design:paramtypes\", [typeof (_a = typeof user_1.UserService !== \"undefined\" && user_1.UserService) === \"function\" ? _a : Object, typeof (_b = typeof jwt_1.JwtService !== \"undefined\" && jwt_1.JwtService) === \"function\" ? _b : Object, typeof (_c = typeof config_1.ConfigService !== \"undefined\" && config_1.ConfigService) === \"function\" ? _c : Object])\n], AuthenticationService);\nexports.AuthenticationService = AuthenticationService;\n","__webpack_require__.h = () => (\"2428f4905a077e8de949\")"],"mappings":";;;;;;;;;;;AAAA;AACA;;;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAIA;AAAA;AACA;AADA;AACA;AADA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AA5CA;AA6CA;AAIA;;A;;;;;;;;;ACzDA;;;;A","sourceRoot":""}